import mongoose from 'mongoose';
import dotenv from 'dotenv';
import StoreConfig from './src/models/StoreConfig.js';

dotenv.config();

// Conectar a MongoDB
await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/dangstore', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function checkAndUpdateConfig() {
  try {
    console.log('üîç Verificando configuraci√≥n actual...');
    
    let config = await StoreConfig.findOne();
    
    if (!config) {
      console.log('‚ùå No hay configuraci√≥n encontrada');
      return;
    }
    
    console.log('üìä Configuraci√≥n actual:');
    console.log('- L√≠mite semanal de pedidos:', config.orderLimits.weeklyMaxOrders);
    console.log('- Pedidos actuales esta semana:', config.orderLimits.currentWeekOrders);
    console.log('- L√≠mite de cat√°logo:', config.stockLimits.catalog.defaultMaxStock);
    console.log('- Ventas actuales del cat√°logo:', config.stockLimits.catalog.currentWeekSales);
    
    // Actualizar l√≠mite de pedidos a 10 para el cat√°logo
    if (config.orderLimits.weeklyMaxOrders !== 10) {
      console.log('üîÑ Actualizando l√≠mite de pedidos a 10...');
      config.orderLimits.weeklyMaxOrders = 10;
      await config.save();
      console.log('‚úÖ L√≠mite actualizado a 10');
    }
    
    // Asegurar que el l√≠mite del cat√°logo est√© en 10
    if (config.stockLimits.catalog.defaultMaxStock !== 10) {
      console.log('üîÑ Actualizando l√≠mite del cat√°logo a 10...');
      config.stockLimits.catalog.defaultMaxStock = 10;
      await config.save();
      console.log('‚úÖ L√≠mite del cat√°logo actualizado a 10');
    }
    
    console.log('üéâ Configuraci√≥n actualizada correctamente');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    mongoose.connection.close();
  }
}

await checkAndUpdateConfig();
